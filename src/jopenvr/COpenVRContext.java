package jopenvr;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
import jopenvr.JOpenVRLibrary.IVRApplications;
import jopenvr.JOpenVRLibrary.IVRChaperone;
import jopenvr.JOpenVRLibrary.IVRChaperoneSetup;
import jopenvr.JOpenVRLibrary.IVRCompositor;
import jopenvr.JOpenVRLibrary.IVRExtendedDisplay;
import jopenvr.JOpenVRLibrary.IVROverlay;
import jopenvr.JOpenVRLibrary.IVRRenderModels;
import jopenvr.JOpenVRLibrary.IVRSettings;
import jopenvr.JOpenVRLibrary.IVRSystem;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class COpenVRContext extends Structure {
	/**
	 * class vr::IVRSystem *<br>
	 * C type : IVRSystem*
	 */
	public IVRSystem m_pVRSystem;
	/**
	 * class vr::IVRChaperone *<br>
	 * C type : IVRChaperone*
	 */
	public IVRChaperone m_pVRChaperone;
	/**
	 * class vr::IVRChaperoneSetup *<br>
	 * C type : IVRChaperoneSetup*
	 */
	public IVRChaperoneSetup m_pVRChaperoneSetup;
	/**
	 * class vr::IVRCompositor *<br>
	 * C type : IVRCompositor*
	 */
	public IVRCompositor m_pVRCompositor;
	/**
	 * class vr::IVROverlay *<br>
	 * C type : IVROverlay*
	 */
	public IVROverlay m_pVROverlay;
	/**
	 * class vr::IVRRenderModels *<br>
	 * C type : IVRRenderModels*
	 */
	public IVRRenderModels m_pVRRenderModels;
	/**
	 * class vr::IVRExtendedDisplay *<br>
	 * C type : IVRExtendedDisplay*
	 */
	public IVRExtendedDisplay m_pVRExtendedDisplay;
	/**
	 * class vr::IVRSettings *<br>
	 * C type : IVRSettings*
	 */
	public IVRSettings m_pVRSettings;
	/**
	 * class vr::IVRApplications *<br>
	 * C type : IVRApplications*
	 */
	public IVRApplications m_pVRApplications;
	public COpenVRContext() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("m_pVRSystem", "m_pVRChaperone", "m_pVRChaperoneSetup", "m_pVRCompositor", "m_pVROverlay", "m_pVRRenderModels", "m_pVRExtendedDisplay", "m_pVRSettings", "m_pVRApplications");
	}
	/**
	 * @param m_pVRSystem class vr::IVRSystem *<br>
	 * C type : IVRSystem*<br>
	 * @param m_pVRChaperone class vr::IVRChaperone *<br>
	 * C type : IVRChaperone*<br>
	 * @param m_pVRChaperoneSetup class vr::IVRChaperoneSetup *<br>
	 * C type : IVRChaperoneSetup*<br>
	 * @param m_pVRCompositor class vr::IVRCompositor *<br>
	 * C type : IVRCompositor*<br>
	 * @param m_pVROverlay class vr::IVROverlay *<br>
	 * C type : IVROverlay*<br>
	 * @param m_pVRRenderModels class vr::IVRRenderModels *<br>
	 * C type : IVRRenderModels*<br>
	 * @param m_pVRExtendedDisplay class vr::IVRExtendedDisplay *<br>
	 * C type : IVRExtendedDisplay*<br>
	 * @param m_pVRSettings class vr::IVRSettings *<br>
	 * C type : IVRSettings*<br>
	 * @param m_pVRApplications class vr::IVRApplications *<br>
	 * C type : IVRApplications*
	 */
	public COpenVRContext(IVRSystem m_pVRSystem, IVRChaperone m_pVRChaperone, IVRChaperoneSetup m_pVRChaperoneSetup, IVRCompositor m_pVRCompositor, IVROverlay m_pVROverlay, IVRRenderModels m_pVRRenderModels, IVRExtendedDisplay m_pVRExtendedDisplay, IVRSettings m_pVRSettings, IVRApplications m_pVRApplications) {
		super();
		this.m_pVRSystem = m_pVRSystem;
		this.m_pVRChaperone = m_pVRChaperone;
		this.m_pVRChaperoneSetup = m_pVRChaperoneSetup;
		this.m_pVRCompositor = m_pVRCompositor;
		this.m_pVROverlay = m_pVROverlay;
		this.m_pVRRenderModels = m_pVRRenderModels;
		this.m_pVRExtendedDisplay = m_pVRExtendedDisplay;
		this.m_pVRSettings = m_pVRSettings;
		this.m_pVRApplications = m_pVRApplications;
	}
	public COpenVRContext(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends COpenVRContext implements Structure.ByReference {
		
	};
	public static class ByValue extends COpenVRContext implements Structure.ByValue {
		
	};
}
